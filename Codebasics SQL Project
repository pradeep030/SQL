USE gdb023;

-- Created VIEWS for every requests to make it easy to import data in POWERBI for the further vizualisation.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Request 1:- Provide the list of markets in which customer "Atliq Exclusive" operates its business in the APAC regiON.

CREATE VIEW request_1 AS
					(SELECT DISTINCT(market) 
						FROM gdb023.dim_customer 
							WHERE customer="Atliq Exclusive" AND region="APAC"); 
SELECT * FROM request_1;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Request 2:- What is the percentage of unique product increASe in 2021 vs. 2020? The final output cONtains these fields, 
--    unique_products_2020 unique_products_2021 percentage_chg.

-- using CTE method
					
CREATE VIEW request_2 AS                  
                    (WITH cte1 AS (SELECT COUNT(DISTINCT product_code) AS  unique_products_2020     
									FROM gdb023.fact_sales_mONthly
										WHERE fiscal_year=2020), 
						 cte2 AS (SELECT COUNT(DISTINCT product_code) AS  unique_products_2021     
									FROM gdb023.fact_sales_mONthly
										WHERE fiscal_year=2021)
					SELECT unique_products_2020, unique_products_2021, 
						   ROUND((((unique_products_2021-unique_products_2020)/(unique_products_2020))*100),2) AS percentage_chg
						FROM cte1,cte2);
SELECT * FROM request_2;

-- using Subquery method
					SELECT product_2020.unique_products_2020, product_2021.unique_products_2021,   
					       ROUND((((unique_products_2021-unique_products_2020)/(unique_products_2020))*100),2) AS percentage_chg
						FROM (SELECT COUNT(DISTINCT product_code) AS unique_products_2020
								FROM gdb023.fact_sales_monthly
									WHERE fiscal_year=2020) AS product_2020                        																								   
								JOIN (SELECT COUNT(DISTINCT product_code) AS unique_products_2021  
										FROM gdb023.fact_sales_monthly
											WHERE fiscal_year=2021) AS product_2021                
											ON product_2020.unique_products_2020 <> product_2021.unique_products_2021;
   -------------------------------------------------------------------------------------------------------------------------------------------------------------------------               
-- Request 3:- Provide a report with all the unique product counts for each segment and sort them in descending order of product count. 
--    The final output contains 2 fields, | segment, product_count.

CREATE VIEW request_3 AS
					(SELECT segment, COUNT(DISTINCT product_code) AS product_count
						FROM gdb023.dim_product
							GROUP BY segment
							ORDER BY product_count DESC);
SELECT * FROM request3;                            
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Request 4:- Follow-up: Which segment had the most increase in unique products in 2021 vs 2020? 
--    The final output contains these fields | segment, product_count_2020, product_count_2021, difference.

CREATE VIEW request_4 AS
					(WITH cte1 AS (SELECT p.segment, COUNT(DISTINCT p.product_code) AS product_count_2020
									FROM gdb023.dim_product AS p 
                                    INNER JOIN fact_sales_monthly AS s
									ON p.product_code = s.product_code
										WHERE fiscal_year = 2020
										GROUP BY p.segment
										ORDER BY product_count_2020 DESC),
						  cte2 AS (SELECT p.segment, COUNT(DISTINCT p.product_code) AS product_count_2021
									FROM gdb023.dim_product AS p 
                                    INNER JOIN fact_sales_monthly AS s
									ON p.product_code = s.product_code
										WHERE fiscal_year = 2021
										GROUP BY p.segment
										ORDER BY product_count_2021 DESC)
					 SELECT cte1.segment, product_count_2020, product_count_2021, (product_count_2021-product_count_2020) AS difference
						FROM cte1 INNER JOIN cte2 
						ON cte1.segment = cte2.segment
							ORDER BY difference DESC);
SELECT * FROM request_4;                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Request 5:- Get the products that have the highest and lowest manufacturing costs.
--    The final output should cONtain these fields,| product_code, product, manufacturing_cost.

CREATE VIEW request_5 AS
					(SELECT * 
						FROM (SELECT p.product_code, product, manufacturing_cost
								FROM gdb023.dim_product p
								INNER JOIN fact_manufacturing_cost s
								ON p.product_code=s.product_code
									ORDER BY manufacturing_cost DESC
									LIMIT 1) a
						UNION
						SELECT * 
						FROM (SELECT p.product_code, product, manufacturing_cost
								FROM gdb023.dim_product p
								INNER JOIN fact_manufacturing_cost s
								ON p.product_code=s.product_code
									ORDER BY manufacturing_cost ASC
									LIMIT 1) b);
SELECT * FROM request_5;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Request 6:- Generate a report which contains the top 5 customers who received an average high pre_invoice_discount_pct for the fiscal year 2021 and in the Indian market. 
--    The final output contains these fields,| customer_code, customer, average_discount_percentage.
-- drop view if exists request_6;
CREATE VIEW request_6 AS
					(SELECT c.customer_code, customer, ROUND((AVG(pre_invoice_discount_pct)*100),4) AS average_discount_percentage 
						FROM gdb023.dim_customer c
						INNER JOIN gdb023.fact_pre_invoice_deductions i
						ON c.customer_code=i.customer_code
							WHERE fiscal_year=2021 AND market= "India"
							GROUP BY customer
							ORDER BY average_discount_percentage DESC
							LIMIT 5);
SELECT * FROM request_6;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Request 7:- Get the complete report of the Gross sales amount for the customer “Atliq Exclusive” for each month . 
--    This analysis helps to get an idea of low and high-performing months and take strategic decisions. 
--    The final report contains these columns:| Month, Year, Gross sales Amount.

CREATE VIEW request_7 AS
					(SELECT DATE_FORMAT(date,'%M') as month, YEAR(date) as year, ROUND(SUM(gross_price*sold_quantity),2) AS Gross_Sales_Amount
						FROM (SELECT c.customer_code, customer, date, product_code, sold_quantity
								FROM gdb023.dim_customer c
								INNER JOIN fact_sales_monthly s
								ON  c.customer_code=s.customer_code) AS j
								INNER JOIN fact_gross_price g
								ON j.product_code=g.product_code
									WHERE customer= "Atliq Exclusive"
									GROUP BY month,year
									ORDER BY year);
SELECT * FROM request_7;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Request 8:- In which quarter of 2020, got the maximum total_sold_quantity? 
--    The final output contains these fields sorted by the total_sold_quantity | Quarter, total_sold_quantity.

CREATE VIEW request_8 AS
					(WITH cte1 as (SELECT date, MONTH(date) as month, sold_quantity 
							FROM fact_sales_monthly
								WHERE fiscal_year=2020)
					 SELECT CASE
							WHEN MONTH(date) in (9,10,11) THEN 'Q1'
							WHEN MONTH(date) in (12,1,2) THEN 'Q2'
							WHEN MONTH(date) in (3,4,5) THEN 'Q3'
							WHEN MONTH(date) in (6,7,8) THEN 'Q4' END AS Quarter, SUM(sold_quantity) AS total_sold_quantity
								FROM cte1
									GROUP BY Quarter
									ORDER BY total_sold_quantity DESC);
SELECT * FROM request_8;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Request 9:- Which channel helped to bring more gross sales in the fiscal year 2021 and the percentage of contribution? 
--    The final output contains these fields,| channel, gross_sales_mln, percentage.
drop view if exists request_9;
CREATE VIEW request_9 AS
					(WITH cte AS (SELECT channel, sold_quantity, gross_price, ROUND(SUM((gross_price*sold_quantity)/1000000),2) AS Gross_Sales_mln
									FROM gdb023.dim_customer c
									INNER JOIN fact_sales_monthly s
									ON  c.customer_code=s.customer_code 
									INNER JOIN fact_gross_price g
									ON s.product_code=g.product_code
										where s.fiscal_year= 2021 AND g.fiscal_year=2021
										GROUP BY channel
										ORDER BY Gross_Sales_mln DESC)
					SELECT channel, Gross_Sales_mln, ROUND(((Gross_Sales_mln/(SELECT SUM(Gross_Sales_mln) FROM cte))*100),2) AS Percentage
					FROM cte);
SELECT * FROM request_9;                    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Request 10:- Get the Top 3 products in each division that have a high total_sold_quantity in the fiscal_year 2021? 
--     The final output contains these fields,| division, product_code, product, total_sold_quantity, rank_order

CREATE VIEW request_10 AS
					(WITH CTE1 AS (SELECT p.product_code, division, product, sold_quantity, fiscal_year, SUM(sold_quantity) AS total_sold_quantity
									FROM gdb023.dim_product p
									INNER JOIN fact_sales_monthly s
									ON p.product_code=s.product_code
										WHERE fiscal_year=2021
										GROUP BY product),
						 CTE2 AS (SELECT division, product_code, product, total_sold_quantity, 
								   DENSE_RANK() OVER (PARTITION BY division ORDER BY total_sold_quantity DESC) AS rank_order
									FROM CTE1)
									SELECT * 
										FROM CTE2
											WHERE rank_order<=3);
SELECT * FROM request_10;                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Additional insights

-- Total Revenue generated by customer "Atliq Exclusive" operates its business in the APAC region.
create view req_11 as
					(WITH CTE1 AS (SELECT c.market, c.customer, ROUND(SUM((gross_price*sold_quantity)/1000000),2) AS Gross_Sales_mln, c.customer_code, s.product_code
									FROM gdb023.dim_customer c
									join gdb023.fact_sales_monthly s
									ON c.customer_code=s.customer_code
									join gdb023.fact_gross_price g
									ON s.product_code=g.product_code 
									WHERE c.customer="Atliq Exclusive" AND region="APAC"
									GROUP BY MARKET),
						 CTE2 AS (SELECT market, customer, Gross_Sales_mln, i.customer_code, pre_invoice_discount_pct  
									FROM CTE1
									JOIN gdb023.fact_pre_invoice_deductions i
									ON CTE1.customer_code=i.customer_code
										GROUP BY i.customer_code)
										-- LIMIT 5;
					 SELECT market, customer, ROUND((Gross_Sales_mln-(pre_invoice_discount_pct*Gross_Sales_mln)),2) AS Revenue 
                     FROM CTE2
						ORDER BY Revenue DESC);
select * from req_11;
