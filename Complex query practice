1) /*DUPLICATES*/
drop table if exists users;
create table users
(
user_id int primary key,
user_name varchar(30) not null,
email varchar(50));

insert into users values
(1, 'Sumit', 'sumit@gmail.com'),
(2, 'Reshma', 'reshma@gmail.com'),
(3, 'Farhana', 'farhana@gmail.com'),
(4, 'Robin', 'robin@gmail.com'),
(5, 'Robin', 'robin@gmail.com');

select *
from users;

select x.*
from(select *,
row_number() over(partition	by user_name order by user_id) as rn
from users) x
where x.rn>1
-------------------------------------------------------------------------------------------------
2)/* FETCH 2ND LAST RECORD */

drop table employee;
create table employee
( emp_ID int primary key
, emp_NAME varchar(50) not null
, DEPT_NAME varchar(50)
, SALARY int);

insert into employee values(101, 'Mohan', 'Admin', 4000);
insert into employee values(102, 'Rajkumar', 'HR', 3000);
insert into employee values(103, 'Akbar', 'IT', 4000);
insert into employee values(104, 'Dorvin', 'Finance', 6500);
insert into employee values(105, 'Rohit', 'HR', 3000);
insert into employee values(106, 'Rajesh',  'Finance', 5000);
insert into employee values(107, 'Preet', 'HR', 7000);
insert into employee values(108, 'Maryam', 'Admin', 4000);
insert into employee values(109, 'Sanjay', 'IT', 6500);
insert into employee values(110, 'Vasudha', 'IT', 7000);
insert into employee values(111, 'Melinda', 'IT', 8000);
insert into employee values(112, 'Komal', 'IT', 10000);
insert into employee values(113, 'Gautham', 'Admin', 2000);
insert into employee values(114, 'Manisha', 'HR', 3000);
insert into employee values(115, 'Chandni', 'IT', 4500);
insert into employee values(116, 'Satya', 'Finance', 6500);
insert into employee values(117, 'Adarsh', 'HR', 3500);
insert into employee values(118, 'Tejaswi', 'Finance', 5500);
insert into employee values(119, 'Cory', 'HR', 8000);
insert into employee values(120, 'Monica', 'Admin', 5000);
insert into employee values(121, 'Rosalin', 'IT', 6000);
insert into employee values(122, 'Ibrahim', 'IT', 8000);
insert into employee values(123, 'Vikram', 'IT', 8000);
insert into employee values(124, 'Dheeraj', 'IT', 11000);

select * from employee

select emp_id, emp_name, dept_name, salary
from (
select *,
row_number() over (order by emp_id desc) as rn
from employee e) x
where x.rn = 2;


SELECT  
FROM EMPLOYEE
ORDER BY EMP_ID DESC

------------------------------------------------------------------------------------------------------------
3) /* HIGHEST AND LOWEST SALARIES */

drop table employee;
create table employee
( emp_ID int primary key
, emp_NAME varchar(50) not null
, DEPT_NAME varchar(50)
, SALARY int);

insert into employee values(101, 'Mohan', 'Admin', 4000);
insert into employee values(102, 'Rajkumar', 'HR', 3000);
insert into employee values(103, 'Akbar', 'IT', 4000);
insert into employee values(104, 'Dorvin', 'Finance', 6500);
insert into employee values(105, 'Rohit', 'HR', 3000);
insert into employee values(106, 'Rajesh',  'Finance', 5000);
insert into employee values(107, 'Preet', 'HR', 7000);
insert into employee values(108, 'Maryam', 'Admin', 4000);
insert into employee values(109, 'Sanjay', 'IT', 6500);
insert into employee values(110, 'Vasudha', 'IT', 7000);
insert into employee values(111, 'Melinda', 'IT', 8000);
insert into employee values(112, 'Komal', 'IT', 10000);
insert into employee values(113, 'Gautham', 'Admin', 2000);
insert into employee values(114, 'Manisha', 'HR', 3000);
insert into employee values(115, 'Chandni', 'IT', 4500);
insert into employee values(116, 'Satya', 'Finance', 6500);
insert into employee values(117, 'Adarsh', 'HR', 3500);
insert into employee values(118, 'Tejaswi', 'Finance', 5500);
insert into employee values(119, 'Cory', 'HR', 8000);
insert into employee values(120, 'Monica', 'Admin', 5000);
insert into employee values(121, 'Rosalin', 'IT', 6000);
insert into employee values(122, 'Ibrahim', 'IT', 8000);
insert into employee values(123, 'Vikram', 'IT', 8000);
insert into employee values(124, 'Dheeraj', 'IT', 11000);

select * from employee;


select x.*
from employee e
join 
(select *,
max(salary) over (partition by dept_name) as max_salary,
min(salary) over (partition by dept_name) as min_salary
from employee) x
on e.emp_id = x.emp_id
and (e.SALARY = x.max_salary or e.SALARY = x.min_salary)
order by x.DEPT_NAME, x.SALARY;
/*_______________________________________________________________________________*/

select * from
(
select *,
max(salary) over (partition by dept_name) as max_salary ,
min(salary) over (partition by dept_name) as min_salary from employee
) x
where salary = x.max_salary or salary = x.min_salary;
---------------------------------------------------------------------------------------------

4) /* From the doctors table, fetch the details of doctors who work in the same hospital but in different specialty.*/

create table doctors
(
id int primary key,
name varchar(50) not null,
speciality varchar(100),
hospital varchar(50),
city varchar(50),
consultation_fee int
);

insert into doctors values
(1, 'Dr. Shashank', 'Ayurveda', 'Apollo Hospital', 'Bangalore', 2500),
(2, 'Dr. Abdul', 'Homeopathy', 'Fortis Hospital', 'Bangalore', 2000),
(3, 'Dr. Shwetha', 'Homeopathy', 'KMC Hospital', 'Manipal', 1000),
(4, 'Dr. Murphy', 'Dermatology', 'KMC Hospital', 'Manipal', 1500),
(5, 'Dr. Farhana', 'Physician', 'Gleneagles Hospital', 'Bangalore', 1700),
(6, 'Dr. Maryam', 'Physician', 'Gleneagles Hospital', 'Bangalore', 1500);

select * from doctors;

select d1.*
from doctors d1
join doctors d2
on d1.hospital=d2.hospital and d1.speciality <> d2.speciality
and d1.id<>d2.id
---------------------------------------------------------------------------------------------------------

5) /* From the login_details table, fetch the users who logged in consecutively 3 or more times.*/

drop table login_details;
create table login_details(
login_id int primary key,
user_name varchar(50) not null,
login_date date);


insert into login_details values
(101, 'Michael',GETDATE()),
(102, 'James', GETDATE()),
(103, 'Stewart', GETDATE()+1),
(104, 'Stewart', GETDATE()+1),
(105, 'Stewart', GETDATE()+1),
(106, 'Michael', GETDATE()+2),
(107, 'Michael', GETDATE()+2),
(108, 'Stewart', GETDATE()+3),
(109, 'Stewart', GETDATE()+3),
(110, 'James', GETDATE()+4),
(111, 'James', GETDATE()+4),
(112, 'James', GETDATE()+5),
(113, 'James', GETDATE()+6);

select * from login_details;

--Solution:

select distinct repeated_names
from (
select *,
case when user_name = lead(user_name) over(order by login_id)
and  user_name = lead(user_name,2) over(order by login_id)
then user_name else null end as repeated_names
from login_details) x
where x.repeated_names is not null
-----------------------------------------------------------------------------------------------------------------------

6) /* From the students table, write a SQL query to interchange the adjacent student names.*/

drop table students;
create table students
(
id int primary key,
student_name varchar(50) not null
);
insert into students values
(1, 'James'),
(2, 'Michael'),
(3, 'George'),
(4, 'Stewart'),
(5, 'Robin');

select * from students;

select id, student_name,
case when id%2>0 then lead(student_name,1,student_name) over(order by id)
when id%2=0 then lag(student_name) over(order by id) else null end as student_interchange
from students;

/*________________________________________________________________*/

select *,
isnull(case when id%2=0 then
lag(student_name) over(order by id)
when id%2=1 then
lead(student_name) over(order by id)
else
student_name
end,student_name) as new_student
from students
----------------------------------------------------------------------------------------------------------------------------

7) /* From the weather table, fetch all the records when London had extremely cold temperature for 3 consecutive days or more.*/

create table weather
(
id int,
city varchar(50),
temperature int,
day date
);
delete from weather;
insert into weather values
(1, 'London', -1,GETDATE()),
(2, 'London', -2, GETDATE()+1),
(3, 'London', 4,GETDATE()+2 ),
(4, 'London', 1, GETDATE()+3),
(5, 'London', -2, GETDATE()+4),
(6, 'London', -5, GETDATE()+5),
(7, 'London', -7, GETDATE()+6),
(8, 'London', 5,GETDATE()+7 );

select * from weather;

select id,city,temperature,day
from(
select *,
	case when temperature<0
		and lead(temperature) over(order by day) < 0
		and lead(temperature,2) over(order by day) < 0
		then 'y'
		when temperature<0
		and lag(temperature) over(order by day) < 0
		and lag(temperature,2) over(order by day) < 0
	    then 'y'
		when temperature<0
		and lead(temperature) over(order by id) < 0
        and lag(temperature) over(order by id) < 0
		then 'y'
	end  as flag
from weather) x
where x.flag= 'y';
---------------------------------------------------------------------------------------------------------------------------

8) /* From the following 3 tables (event_category, physician_speciality, patient_treatment),
     write a SQL query to get the histogram of specialties of the unique physicians who have done the procedures but never did prescribe anything. */

drop table event_category;
create table event_category
(
  event_name varchar(50),
  category varchar(100)
);

drop table physician_speciality;
create table physician_speciality
(
  physician_id int,
  speciality varchar(50)
);

drop table patient_treatment;
create table patient_treatment
(
  patient_id int,
  event_name varchar(50),
  physician_id int
);


insert into event_category values ('Chemotherapy','Procedure');
insert into event_category values ('Radiation','Procedure');
insert into event_category values ('Immunosuppressants','Prescription');
insert into event_category values ('BTKI','Prescription');
insert into event_category values ('Biopsy','Test');


insert into physician_speciality values (1000,'Radiologist');
insert into physician_speciality values (2000,'Oncologist');
insert into physician_speciality values (3000,'Hermatologist');
insert into physician_speciality values (4000,'Oncologist');
insert into physician_speciality values (5000,'Pathologist');
insert into physician_speciality values (6000,'Oncologist');


insert into patient_treatment values (1,'Radiation', 1000);
insert into patient_treatment values (2,'Chemotherapy', 2000);
insert into patient_treatment values (1,'Biopsy', 1000);
insert into patient_treatment values (3,'Immunosuppressants', 2000);
insert into patient_treatment values (4,'BTKI', 3000);
insert into patient_treatment values (5,'Radiation', 4000);
insert into patient_treatment values (4,'Chemotherapy', 2000);
insert into patient_treatment values (1,'Biopsy', 5000);
insert into patient_treatment values (6,'Chemotherapy', 6000);


select * from patient_treatment;
select * from event_category;
select * from physician_speciality;


-- Solution:
select ps.speciality, count(1) as speciality_count
from patient_treatment pt
join event_category ec 
on ec.event_name = pt.event_name
join physician_speciality ps 
on ps.physician_id = pt.physician_id
where ec.category = 'Procedure'
and pt.physician_id not in (select pt2.physician_id
							from patient_treatment pt2
							join event_category ec 
							on ec.event_name = pt2.event_name
							where ec.category in ('Prescription'))
group by ps.speciality;
----------------------------------------------------------------------------------------------------------------------------

9)/* Find the top 2 accounts with the maximum number of unique patients on a monthly basis. */

drop table patient_logs;
create table patient_logs
(
  account_id int,
  date date,
  patient_id int
);

insert into patient_logs values (1,'2020-01-02', 100)
insert into patient_logs values (1,'2020-01-27', 200)
insert into patient_logs values (2,'2020-01-01', 300)
insert into patient_logs values (2,'2020-01-21', 400)
insert into patient_logs values (2, '2020-01-21', 300)
insert into patient_logs values (2, '2020-01-01', 500)
insert into patient_logs values (3, '2020-01-20', 400)
insert into patient_logs values (1, '2020-03-04', 500)
insert into patient_logs values (3, '2020-01-20', 450);

select * from patient_logs;


select a.month, a.account_id, a.no_of_unique_patients
from (
		select x.month, x.account_id, no_of_unique_patients,
			row_number() over (partition by x.month order by x.no_of_unique_patients desc) as rn
		from (
				select pl.month, pl.account_id, count(1) as no_of_unique_patients
				from (select distinct month(date) as month, account_id, patient_id
						from patient_logs) pl
				group by pl.month, pl.account_id) x
     ) a
where a.rn < 3;
--------------------------------------------------------------------------------------------------------------------------------------------

10) /* SQL query to fetch N consecutive records */

drop table if exists weather
create table weather
	(
		id 					int 				primary key,
		city 				varchar(50) not null,
		temperature int 				not null,
		day 				date				not null
	);
insert into weather values
	(1, 'London', -1, ('2021-01-01')),
	(2, 'London', -2, ('2021-01-02')),
	(3, 'London', 4, ('2021-01-03')),
	(4, 'London', 1, ('2021-01-04')),
	(5, 'London', -2, ('2021-01-05')),
	(6, 'London', -5, ('2021-01-06')),
	(7, 'London', -7, ('2021-01-07')),
	(8, 'London', 5, ('2021-01-08')),
	(9, 'London', -20, ('2021-01-09')),
	(10, 'London', 20, ('2021-01-10')),
	(11, 'London', 22, ('2021-01-11')),
	(12, 'London', -1, ('2021-01-12')),
	(13, 'London', -2, ('2021-01-13')),
	(14, 'London', -2, ('2021-01-14')),
	(15, 'London', -4, ('2021-01-15')),
	(16, 'London', -9, ('2021-01-16')),
	(17, 'London', 0, ('2021-01-17')),
	(18, 'London', -10, ('2021-01-18')),
	(19, 'London', -11, ('2021-01-19')),
	(20, 'London', -12, ('2021-01-20')),
	(21, 'London', -11, ('2021-01-21'));


select * from weather;

-- Finding n consecutive records where temperature is below zero. And table has a primary key.


with t1 as 
			(select *,
			row_number() over(order by id) as rn,
			id-(row_number() over(order by id)) as difference
			from weather 
			where temperature<0),
			
	 t2 as  (select id,city,day,temperature, count(1) over(partition by difference order by difference) n_consecutive
			from t1)

select * 
from t2 
where t2.n_consecutive>4

-- Finding n consecutive records where temperature is below zero. And table does not have primary key.

drop table if exists vw_weather
CREATE TABLE vw_weather  (city 	varchar(50) not null,
		temperature int not null)
insert into vw_weather select city,temperature from weather;

select *
from vw_weather

with
	w as
		(select *, row_number() over (order by city) as id
		from vw_weather),
	t1 as
		(select *,	id - row_number() over (order by id) as diff
		from w
		where w.temperature < 0),
	t2 as
		(select *,
		count(*) over (partition by diff order by diff) as cnt
		from t1)
select city, temperature, id
from t2
where t2.cnt = 5;
